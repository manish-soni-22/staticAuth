a complete, step-by-step guide to create a VPC setup for OpenSearch and Lambda integration, including:

✅ VPC
✅ Subnets (public & private)
✅ Internet Gateway
✅ NAT Gateway
✅ Route tables
✅ Lambda config
✅ OpenSearch inside VPC

This setup will allow:

Your Lambda to live in a private subnet

Access OpenSearch in the same VPC

Still retain internet access via NAT Gateway (for AWS SDK calls, etc.)

🚧 Overview Architecture
scss
Copy
Edit
      ┌──────────────┐
      │ API Gateway  │ (Public)
      └────┬─────────┘
           ↓
     ┌─────────────┐
     │ Lambda       │ (Private Subnet)
     └────┬────────┘
          ↓
 ┌────────────────────┐
 │ OpenSearch (VPC)   │ (Private Subnet)
 └────────────────────┘
          ↓
 ┌────────────────────┐
 │ NAT Gateway        │ (Public Subnet)
 └────────────────────┘
✅ Step-by-Step Guide to Create VPC for OpenSearch + Lambda
🔹 Step 1: Create a VPC
Go to VPC Console → Create VPC

Choose "VPC and more"

Set:

Name: my-vpc-opensearch

CIDR Block: 10.0.0.0/16

Tenancy: Default

Click Create VPC

🔹 Step 2: Create 2 Public and 2 Private Subnets (in different AZs)
Type	Subnet Name	AZ	CIDR Block
Public	public-subnet-a	ap-south-1a	10.0.0.0/24
Public	public-subnet-b	ap-south-1b	10.0.1.0/24
Private	private-subnet-a	ap-south-1a	10.0.2.0/24
Private	private-subnet-b	ap-south-1b	10.0.3.0/24

🔹 Step 3: Create an Internet Gateway
Go to Internet Gateways → Create

Name: my-vpc-igw

Attach it to the VPC my-vpc-opensearch

🔹 Step 4: Create a NAT Gateway (for Lambda's internet access)
Go to Elastic IPs → Allocate new address

Go to NAT Gateways → Create NAT Gateway

Name: my-vpc-nat

Subnet: Choose one of the public subnets

Elastic IP: Choose the one allocated above

Create and wait until Available

🔹 Step 5: Create Route Tables
5a. Public Route Table (for public subnets)
Add Route:

Destination: 0.0.0.0/0

Target: Internet Gateway

Attach to:

public-subnet-a

public-subnet-b

5b. Private Route Table (for Lambda and OpenSearch)
Add Route:

Destination: 0.0.0.0/0

Target: NAT Gateway

Attach to:

private-subnet-a

private-subnet-b

🔹 Step 6: Create OpenSearch Domain inside VPC
Go to OpenSearch → Create Domain

Select:

Deployment type: Production

Network: VPC

VPC: my-vpc-opensearch

Subnets: private-subnet-a, private-subnet-b

Security group: Create one or use existing allowing port 443 inbound from Lambda SG

Configure access policy using IAM or fine-grained roles

🔹 Step 7: Create Lambda with VPC Access
Go to Lambda Console → Create function

Choose:

VPC: my-vpc-opensearch

Subnets: private-subnet-a, private-subnet-b

Security group: Allow outbound to OpenSearch SG (port 443)

In your Lambda handler:

js
Copy
Edit
const { Client } = require('@opensearch-project/opensearch');
const client = new Client({
  node: 'https://your-vpc-os-domain.region.es.amazonaws.com',
  auth: {
    username: '...',
    password: '...'
  }
});

const result = await client.search({ index: 'my-index', body: { query: { match_all: {} } } });
🔹 Step 8: Test Connection
Deploy Lambda

Invoke it

Check logs (console.log(result)) to confirm communication with OpenSearch

🔐 Bonus: Security Best Practices
✅ Enable encryption at rest + in transit in OpenSearch

✅ Use fine-grained IAM policies or Cognito-based auth

✅ Ensure SG only allows what’s needed (443 from Lambda SG)

✅ Use VPC Flow Logs to audit access

✅ You Now Have:
A VPC-secured OpenSearch setup

Lambda securely communicating inside private subnets

Internet access for Lambda (via NAT)

Public access only for API Gateway
